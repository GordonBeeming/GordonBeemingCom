@page "/accepted-urls"

@inject IExternalUrlsService externalUrlsService
@inject AppDbContext context
@inject IConfiguration configuration
@inject IHttpContextAccessor httpContextAccessor
@attribute [Authorize]

<PageTitle>Accepted Urls</PageTitle>

<h1>Accepted Urls</h1>
  
<button type="submit" class="btn btn-primary" @onclick="ScanAllPosts">@(scanButtonText)</button>

<EditForm Model="htmlContext">
    
  <div class="row">
    <div class="form-group col-lg-12 col-sm-12">
      <label for="htmlInput">Html:</label>
      <InputTextArea id="htmlInput" class="form-control" rows="10" @bind-Value="@htmlContext.Html"/>
    </div>
    <div class="form-group col-lg-12 col-sm-12">
      <button type="submit" class="btn btn-primary" @onclick="ScanHtmlForUrls">@(scanHtmlButtonText)</button>
    </div>
  </div>

</EditForm>

@if (validationIssues.Count > 0)
{
  <ul class="validation-message">
    @for (int i = 0; i < validationIssues.Count; i++)
    {
      <li>@($"{validationIssues[i]}")</li>
    }
  </ul>
}

@if (discoveredLinks.Count > 0)
{
  <h3>Discovered Urls</h3>
  <ul>
    @for (int i = 0; i < discoveredLinks.Count; i++)
    {
      <li>@($"{discoveredLinks[i]}")</li>
    }
  </ul>
}

@code {
  private const string scanButtonTextDefault = "Scan existing posts for urls";
  private string scanButtonText { get; set; } = scanButtonTextDefault;
  private const string scanHtmlButtonTextDefault = "Scan";
  private string scanHtmlButtonText { get; set; } = scanHtmlButtonTextDefault;
  private int ScanCount { get; set; }
  private List<string> validationIssues = new();
  private List<string> discoveredLinks = new();
  
  private HtmlContentBlockContext htmlContext = new HtmlContentBlockContext();

  protected override Task OnInitializedAsync()
  {
    if (httpContextAccessor?.HttpContext?.User?.Identity?.Name?.Equals(configuration["Blog:Username"]) == false)
    {
      return Task.CompletedTask;
    }

    htmlContext = new();
    return Task.CompletedTask;
  }

  private async Task ScanAllPosts()
  {
    try
    {
      var blocks = await context.BlogContentBlocks
        .Where(o => o.BlockType == ContentBlockTypes.Html)
        .AsNoTracking()
        .ToListAsync();
      ScanCount = 0;
      scanButtonText = $"{scanButtonTextDefault} ({ScanCount}/{blocks.Count})";
      StateHasChanged();
      await Task.Delay(1000);
      foreach (var contentBlock in blocks)
      {
        ScanCount++;
        scanButtonText = $"{scanButtonTextDefault} ({ScanCount}/{blocks.Count})";
        StateHasChanged();
        htmlContext = JsonConvert.DeserializeObject<HtmlContentBlockContext>(contentBlock.ContextInfo) ?? new HtmlContentBlockContext();

        await externalUrlsService.RegisterUrlsAsync(htmlContext.Html);
        await externalUrlsService.CommitChangesAsync();
      }

      ScanCount = 0;
      scanButtonText = $"{scanButtonTextDefault} (done)";
      StateHasChanged();
      await LoadDiscoveredLinks();
    }
    catch (Exception ex)
    {
      validationIssues.Add(ex.Message);
      if (ex.InnerException != null)
      {
        validationIssues.Add(ex.InnerException.Message);
      }
    }
  }

  private async Task LoadDiscoveredLinks()
  {
    discoveredLinks = (await externalUrlsService.GetUrlsCacheAsync())
      .OrderBy(o=>o)
      .ToList();
    StateHasChanged();
  }

  private async Task ScanHtmlForUrls()
  {
    if (htmlContext is null)
    {
      return;
    }
    try
    {
      scanHtmlButtonText = "Scanning...";
      StateHasChanged();
      await externalUrlsService.RegisterUrlsAsync(htmlContext.Html);
      await externalUrlsService.CommitChangesAsync();
      htmlContext.Html = string.Empty;
      scanHtmlButtonText = $"{scanHtmlButtonTextDefault} (done)";
      StateHasChanged();
      await LoadDiscoveredLinks();
    }
    catch (Exception ex)
    {
      validationIssues.Add(ex.Message);
      if (ex.InnerException != null)
      {
        validationIssues.Add(ex.InnerException.Message);
      }
    }
  }
}